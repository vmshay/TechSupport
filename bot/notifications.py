from datetime import datetime

from bot.dispatcher import bot
import bot.config as cnf
from bot.keyboards import tickets_kb, user_response, new_user_kb


async def new_bug(data):
    msg = f"<b>–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å</b>\n" \
        f"–°–æ–æ–±—â–µ–Ω–∏–µ: {data['bug']}\n" \
        f"–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: {data['from_user']}\n"
    await bot.send_message(cnf.CHAT_ID, msg)


async def new_ticket(data):
    category = ''
    if data['Category'] == 'PC':
        category = 'üíª –ù–µ –≤–∫–ª—é—á–∞–µ—Ç—Å—è –ü–ö'
    if data['Category'] == 'deny_login':
        category = 'üö™ –ù–µ –≤—Ö–æ–¥–∏—Ç –≤ Moodle/–ü–ö'
    if data['Category'] == 'no_internet':
        category = 'üåê –ù–µ—Ç –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞'
    if data['Category'] == 'peripherals':
        category = 'üñ±Ô∏è –ù—É–∂–Ω–∞ –ø–µ—Ä–∏—Ñ–µ—Ä–∏—è'
    if data['Category'] == 'printer':
        category = 'üñ®Ô∏è –ù–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –ø—Ä–∏–Ω—Ç–µ—Ä'
    if data['Category'] == 'other':
        category = '‚ùî –î—Ä—É–≥–æ–µ '

    owner = data['name']
    cabinet = data['cab'].split(' ')[1]
    problem = data['problem']
    t_id = data['id']
    time = datetime.fromtimestamp(data['t_new']).strftime("%d.%m.%Y %H:%M")
    msg = f"<b>–ù–æ–≤—ã–π —Ç–∏–∫–µ—Ç!</b>\n" \
        f"ID: {t_id}\n" \
        f"–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: {owner}\n" \
        f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}\n" \
        f"–ê—É–¥–∏—Ç–æ—Ä–∏—è: {cabinet}\n" \
        f"–ü—Ä–æ–±–ª–µ–º–∞: {problem}\n" \
        f"–î–∞—Ç–∞: {time}"
    await bot.send_message(cnf.CHAT_ID, msg, reply_markup=tickets_kb("accept", "deny", t_id))


async def notify_user_accept(u_id, t_id,user):
    msg = f"–ó–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞ –≤ —Ä–∞–±–æ—Ç—É\n" \
          f"–ü—Ä–∏–¥–µ—Ç: {user}\n" \
          f"–ö–æ–≥–¥–∞ –∑–∞—è–≤–∫–∞ –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ"
    await bot.send_message(u_id, msg, reply_markup=user_response(t_id))


async def notify_user_increase(u_id):
    msg = f"–°—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏ –±—ã–ª –∏–∑–º–µ–Ω–µ–Ω"
    await bot.send_message(u_id, msg)


async def notify_user_force_close(u_id):
    msg = f"–ó–∞—è–≤–∫–∞ –±—ã–ª–∞ –∑–∞–∫—Ä—ã—Ç–∞ —Ç–µ—Ö.–æ—Ç–¥–µ–ª–æ–º\n" \
        f"–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ /start"
    await bot.send_message(u_id, msg)


async def notify_user_deny(u_id):
    msg = f"–ó–∞—è–≤–∫–∞ –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞\n" \
        f"–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ /start"
    await bot.send_message(u_id, msg)


async def new_user(data):
    msg = f"<b>–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å</b>\n" \
          f"TG: @{data['tg']}\n" \
          f"–§–ò–û: {data['FIO']}\n" \
          f"–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {data['number']}"
    await bot.send_message(cnf.CHAT_ID, msg, reply_markup=new_user_kb(f"u_accept", f"u_deny", data['id']))


async def notify_user_reg_accept(u_id):
    msg = f"–£—á–µ—Ç–Ω–∞—è –∑–∞–ø–∏—Å—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞"
    await bot.send_message(u_id, msg)


async def notify_user_reg_deny(u_id):
    msg = f"–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞"
    await bot.send_message(u_id, msg)


async def notify_admins_close(t_id):
    msg = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–∫—Ä—ã–ª –∑–∞—è–≤–∫—É ‚Ññ {t_id}"
    await bot.send_message(cnf.CHAT_ID,msg)
