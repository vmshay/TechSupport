import asyncio
from aiogram import types, Dispatcher
from aiogram.dispatcher.storage import FSMContext
from bot.keyboards import main_kb, register_kb
from bot.States import SendBugState
from bot.notifications import new_bug
from bot import database, sql
from datetime import datetime
from bot import config as cnf


async def start_cmd(message: types.Message):
    # await message.delete()

    db = database.Database()
    if message.chat.type == 'private':
        if not db.sql_fetchone(sql.check_id(message.from_user.id)):
            await message.answer(f"ü§ñ–í–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –±–æ—Ç —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏ü§ñ\n"
                                 f"\n"
                                 f"–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—É –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è\n"
                                 f"..", reply_markup=register_kb())
        elif db.sql_fetchone(f'select approved from users where tg_id ={message.from_user.id}') == '0':
            msg = await message.answer("–ê–∫–∫–∞—É–Ω—Ç –µ—â–µ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω")
            await asyncio.sleep(5)
            await msg.delete()
        else:

            await message.answer(f"ü§ñ–í–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –±–æ—Ç —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏ü§ñ\n"
                                 f"\n"
                                 f"–î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –∑–∞—è–≤–∫—É –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.\n\n"
                                 f"–ï—Å–ª–∏ –µ—Å—Ç—å –ø–æ–∂–µ–ª–∞–Ω–∏—è –∏–ª–∏ –∑–∞–º–µ—á–∞–Ω–∏—è\n"
                                 f"–ú–æ–∂–µ—Ç–µ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ @FeldwebelWillman\n"
                                 f"–ò–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤—Ç–∞—å—Å—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑—å—é /feedback",
                                 reply_markup=main_kb())
    else:
        await message.answer(f"–ï—Å–ª–∏ –í—ã —Ö–æ—Ç–∏—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É, "
                             f"–Ω–∞–ø–∏—à–∏—Ç–µ –ª–∏—á–Ω–æ @TTITTechSuppBot")


async def get_ticket(message: types.Message):
    if message.chat.type == 'private':
        admins = cnf.ADMINS.split(" ")
        data = message.get_args()
        db = database.Database()
        if str(message.from_user.id) not in admins:
            await message.answer("–î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤")
        else:
            try:
                data = int(data)
                client = db.sql_fetchone(
                    f"SELECT users.name FROM users inner join tickets on users.tg_id = tickets.client  WHERE tickets.id = {data}")
                contactor = db.sql_fetchone(
                    f"SELECT users.name FROM users inner join tickets on users.tg_id = tickets.contactor  WHERE tickets.id = {data}")
                ticket = db.sql_fetchall(
                    f"select id, category, cab,problem,category,status, t_new,t_progress,t_increase, t_completed from tickets where id={data}")
                if ticket[0]['status'] == "new":
                    status = "–ù–æ–≤–∞—è"
                elif ticket[0]['status'] == 'closed':
                    status = "–ó–∞–∫—Ä—ã—Ç–∞"
                elif ticket[0]['status'] == 'in progress':
                    status = "–í —Ä–∞–±–æ—Ç–µ"
                elif ticket[0]['status'] == 'force closed':
                    status = "–ó–∞–∫—Ä—ã—Ç–∞ —Ç–µ—Ö.–æ—Ç–¥–µ–ª–æ–º"

                if ticket[0]['t_new'] is None:
                    t_new = "None"
                else:
                    t_new = datetime.fromtimestamp(int(ticket[0]['t_new'])).strftime("%d.%m.%Y %H:%M")

                if ticket[0]['t_progress'] is None:
                    t_progress = "None"
                else:
                    t_progress = datetime.fromtimestamp(int(ticket[0]['t_progress'])).strftime("%d.%m.%Y %H:%M")

                if ticket[0]['t_increase'] is None:
                    t_increase = "None"
                else:
                    t_increase = datetime.fromtimestamp(int(ticket[0]['t_increase'])).strftime("%d.%m.%Y %H:%M")

                if ticket[0]['t_completed'] is None:
                    t_completed = "None"
                else:
                    t_completed = datetime.fromtimestamp(int(ticket[0]['t_completed'])).strftime("%d.%m.%Y %H:%M")
                await message.answer(f"ID: {ticket[0]['id']}\n\n"
                                     f"–ó–∞—è–≤–∏—Ç–µ–ª—å: {client}\n"
                                     f"–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: {contactor}\n\n"
                                     f"–°—Ç–∞—Ç—É—Å: {status}\n"
                                     f"–ü—Ä–æ–±–ª–µ–º–∞: {ticket[0]['problem']}\n\n"
                                     f"–ò–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–Ω–∞: {t_new}\n"
                                     f"–í–∑—è—Ç–∞ –≤ —Ä–∞–±–æ—Ç—É; {t_progress}\n"
                                     f"–ü–µ—Ä–µ–¥–∞–Ω–∞ –≤—ã—à–µ: {t_increase}\n"
                                     f"–ó–∞–∫—Ä—ã—Ç–∞: {t_completed}\n"
                                     f"")
            except Exception as e:
                print("Exception:", e)
                await message.answer("–¢–∞–∫–æ–≥–æ ID –Ω–µ—Ç")

    else:
        await message.answer(f"–ï—Å–ª–∏ –í—ã —Ö–æ—Ç–∏—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É, "
                             f"–Ω–∞–ø–∏—à–∏—Ç–µ –ª–∏—á–Ω–æ @TTITTechSuppBot")


async def get_report(message: types.Message):
    await message.delete()
    await SendBugState.send_bug.set()
    msg = await message.answer("–û–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É")
    await asyncio.sleep(5)
    await msg.delete()


async def send_report(message: types.Message, state: FSMContext):
    await state.update_data(bug=message.text)
    await state.update_data(from_user=message.from_user.username)
    data = await state.get_data()
    await state.finish()
    await new_bug(data)
    await message.delete()


def main_register(dp: Dispatcher):
    dp.register_message_handler(start_cmd, commands=['start', 'ticket'])
    dp.register_message_handler(get_report, commands=['feedback'])
    dp.register_message_handler(get_ticket, commands=['id'])
    dp.register_message_handler(send_report, state=SendBugState.send_bug)
