import asyncio
from aiogram import types, Dispatcher
from bot.keyboards import default_tickets_kb, cabinets_kb, main_kb, floor_kb, without_comment
from aiogram.dispatcher.storage import FSMContext
from bot.States import TicketState
from bot.notifications import new_ticket
from datetime import datetime
from bot import database, sql
from bot.validators import reject_cmd
import time

async def return_menu(call: types.CallbackQuery, state: FSMContext):
    await state.finish()
    await call.message.edit_text(f"ü§ñ–í–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –±–æ—Ç —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –¢–¢–ò–¢ü§ñ\n"
                                 f"\n"
                                 f"–î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –∑–∞—è–≤–∫—É –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.\n\n"
                                 f"–¢–∞–∫ –∂–µ –≤—ã –º–æ–∂–µ—Ç–µ —É–∑–Ω–∞—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏.\n\n"
                                 f"–ï—Å–ª–∏ –µ—Å—Ç—å –ø–æ–∂–µ–ª–∞–Ω–∏—è –∏–ª–∏ –∑–∞–º–µ—á–∞–Ω–∏—è\n"
                                 f"–ú–æ–∂–µ—Ç–µ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ @FeldwebelWillman\n"
                                 f"–ò–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤—Ç–∞—å—Å—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑—å—é /feedback",
                                 reply_markup=main_kb())


async def init_ticket(call: types.CallbackQuery, state: FSMContext):
    await call.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –æ–±—Ä–∞—â–µ–Ω–∏—è", reply_markup=default_tickets_kb())
    db = database.Database()
    username = db.sql_fetchone(f"select name from users where tg_id = {call.from_user.id}")
    # await TicketState.init.set()
    await state.update_data(Category=call.data)
    await TicketState.category.set()
    await state.update_data(tg_id=call.from_user.id)
    await state.update_data(name=username)


async def choose_floor(call: types.CallbackQuery, state: FSMContext):
    await state.update_data(Category=call.data)
    await call.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —ç—Ç–∞–∂", reply_markup=floor_kb())
    await TicketState.Floor.set()


async def choose_cabinet(call: types.CallbackQuery):
    await call.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –∞—É–¥–∏—Ç–æ—Ä–∏—é", reply_markup=cabinets_kb(call.data))
    await TicketState.Cab.set()


async def get_problem(call: types.CallbackQuery, state: FSMContext):
    msg = await call.message.edit_text("–î–æ–±–∞–≤—å—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π", reply_markup=without_comment()) # –í–æ—Ç —Ç—É—Ç –∫–Ω–æ–ø–∫–∞
    await state.update_data(cab=call.data)
    await TicketState.Problem.set()
    # await asyncio.sleep(30)
    # await msg.delete()


async def send_report(message: types.Message, state: FSMContext):
    db = database.Database()
    timestamp = int(time.time())
    if reject_cmd(message.text):
        await message.delete()
        msg = await message.answer("–ù–µ–ª—å–∑—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã")
        await asyncio.sleep(5)
        await msg.delete()
    else:
        await state.update_data(problem=message.text)
        await state.update_data(t_new=timestamp)
        await state.update_data(status='new')
        msg = await message.answer("–ó–∞—è–≤–∫–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ —Ç–µ—Ö. –æ—Ç–¥–µ–ª")
        data = await state.get_data()
        db.sql_query_send(sql=sql.send_ticket(data))
        ticket_id = db.sql_fetchone('select max(id) from tickets')
        await state.update_data(id=ticket_id)
        print(data)
        data = await state.get_data()
        await state.finish()
        await new_ticket(data)
        # await asyncio.sleep(20)
        # await msg.delete()

async def send_report_noncomment(call: types.CallbackQuery, state: FSMContext):
    db = database.Database()
    timestamp = int(time.time())
    await state.update_data(problem="–ù–µ —É–∫–∞–∑–∞–Ω–æ")
    await state.update_data(t_new=timestamp)
    await state.update_data(status='new')
    msg = await call.message.answer("–ó–∞—è–≤–∫–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ —Ç–µ—Ö. –æ—Ç–¥–µ–ª")
    data = await state.get_data()
    db.sql_query_send(sql=sql.send_ticket(data))
    ticket_id = db.sql_fetchone('select max(id) from tickets')
    await state.update_data(id=ticket_id)
    print(data)
    data = await state.get_data()
    await state.finish()
    await new_ticket(data)



def register_handlers(dp: Dispatcher):
    dp.register_callback_query_handler(init_ticket, text='init')
    dp.register_callback_query_handler(return_menu, text='main_menu', state=[TicketState.init, TicketState.Cab,
                                                                             TicketState.make_ticket, TicketState.Floor,
                                                                             TicketState.category, TicketState.Problem])
    dp.register_callback_query_handler(choose_floor, state=TicketState.category)
    dp.register_callback_query_handler(choose_cabinet, text_startswith='Floor', state=TicketState.Floor)
    dp.register_callback_query_handler(get_problem, text_startswith='–ê—É–¥.', state=TicketState.Cab)
    dp.register_message_handler(send_report, state=TicketState.Problem)
    dp.register_callback_query_handler(send_report_noncomment, text='send_noncoment', state=TicketState.Problem)
