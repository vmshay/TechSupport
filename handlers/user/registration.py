import asyncio
from aiogram import types, Dispatcher
from aiogram.dispatcher.storage import FSMContext
from bot import database
from bot.States import RegisterStates
from bot.keyboards import reset_register_kb, register_kb
from bot.validators import validate_phone, reject_latin, reject_cmd, validate_fio
from bot.notifications import new_user


async def registration(call: types.CallbackQuery):
    await call.message.edit_text(f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞\n"
                                 f"–í–æ–∑–º–æ–∂–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:\n\n"
                                 f"<b>+79995554433</b>\n"
                                 f"<b>9997771122</b>\n"
                                 f"<b>89995554433</b>\n"
                                 f"<b>8-999-888-11-22</b>\n"
                                 f"<b>+7-999-888-11-22</b>", reply_markup=reset_register_kb())
    await RegisterStates.phone.set()


async def get_number(message: types.Message, state: FSMContext):
    if validate_phone(message.text):
        await state.update_data(number=message.text)
        await message.delete()
        msg = await message.answer(f"–£–∫–∞–∂–∏—Ç–µ –§–ò–û\n"
                                   f"–ù–∞–ø—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á")

        await RegisterStates.FIO.set()
        await asyncio.sleep(60)
        await msg.delete()
    else:
        await message.delete()
        msg = await message.answer(f"–£–∫–∞–∑–∞–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞")
        await asyncio.sleep(5)
        await msg.delete()


async def get_fio(message: types.Message, state: FSMContext):
    db = database.Database()
    if reject_cmd(message.text):
        await message.delete()
        msg = await message.answer("–ù–µ–ª—å–∑—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã")
        await asyncio.sleep(5)
        await msg.delete()
    elif reject_latin(message.text):
        await message.delete()
        msg = await message.answer("–ù–µ–ª—å–∑—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª–∞—Ç–∏–Ω–∏—Ü—É –∏ —Å–∏–º–≤–æ–ª—ã")
        await asyncio.sleep(5)
        await msg.delete()
    elif validate_fio(message.text):
        await message.delete()
        msg = await message.answer("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –ø–æ–ª–Ω–æ–µ –§–ò–û")
        await asyncio.sleep(5)
        await msg.delete()
    else:
        await message.delete()

        await state.update_data(FIO=message.text)
        await state.update_data(id=message.from_user.id)
        await state.update_data(tg=message.from_user.username)
        reg_data = await state.get_data()
        await state.finish()
        msg = await message.answer(f"–ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞")
        db.sql_query_send(f"INSERT INTO users (tg_id,name,phone)"
                          f"VALUES ({reg_data['id']},"
                          f"'{reg_data['FIO']}',"
                          f"'{reg_data['number']}')")
        await new_user(reg_data)
        await asyncio.sleep(5)
        await msg.delete()


async def reset_register(call: types.CallbackQuery, state: FSMContext):
    await state.finish()
    await call.message.edit_text(f"ü§ñ–í–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –±–æ—Ç —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏ü§ñ\n"
                                 f"\n"
                                 f"–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—É –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è\n", reply_markup=register_kb())


def register(dp: Dispatcher):
    dp.register_callback_query_handler(registration, text="register")
    dp.register_callback_query_handler(reset_register, text="res_register", state=[RegisterStates.phone,
                                                                                   RegisterStates.FIO])
    dp.register_message_handler(get_number, state=RegisterStates.phone)
    dp.register_message_handler(get_fio, state=RegisterStates.FIO)
